namespace BuilderBuilder.Compilers;

public class RecordCompiler : Compiler
{
    private static readonly IReadOnlyCollection<string> TypesToInitialize = new[] { "ICollection", "IList", "IEnumerable" };

    protected override void Compile()
    {
        AddLine("// Autogenerated, manual changes could be overridden on regeneration");
        CompileBuilder();
    }

    private void CompileBuilder()
    {
        AddLine($"public record {BuilderEntity.Name}Builder");
        WithBlock(() =>
        {
            AddLine($"public static {BuilderEntity.Name}Builder Default => new();");
            AddEmptyLine();
            CompileProperties();
            CompileBuilderMethod();
        });
    }

    private void CompileBuilderMethod()
    {
        AddLine($"public {BuilderEntity.Name} Build() => new()");
        OpenBlock();
        foreach (var field in BuilderEntity.Fields)
        {
            AddLine($"{field.Name} = {field.Name},");
        }

        CloseBlocks(1, ";");
    }

    private void CompileProperties()
    {
        foreach (var field in BuilderEntity.Fields)
        {
            AddLine($"public {field.Type} {field.Name} {{ private get; init; }}{GetInitializer(field.Type)}");
        }
        AddEmptyLine();
    }

    private static string GetInitializer(string fieldType) =>
        TypesToInitialize.Any(fieldType.StartsWith)
            ? " = new();"
            : string.Empty;
}